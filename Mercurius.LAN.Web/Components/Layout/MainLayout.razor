@inherits LayoutComponentBase
<button class="menu-toggle @(sidebarOpen ? "open" : null)" @onclick="ToggleSidebar" aria-label="Toggle menu">
    <span class="menu-toggle-inner">
        <span class="bar"></span>
        <span class="bar"></span>
        <span class="bar"></span>
    </span>
</button>

<div class="page">
    <div class="sidebar @(sidebarOpen ? "open" : null)">
        <NavMenu />
    </div>

    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<script src="/uiInteractions.js"></script>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>


@code {

    private bool sidebarOpen = false;
    void ToggleSidebar() => sidebarOpen = !sidebarOpen;
    [Inject] private IAuthService AuthService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // A hard refresh or the user just navigated to the application for the first time
        if (firstRender && !AuthService.IsLoggedIn)
        {
            var url = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).ToString();
            if (url.Contains("/login"))
            {
                return;
            }

            // Retrieve tokens from cookies
            var accessToken = GetCookie("access_token");
            var refreshToken = GetCookie("refresh_token");

            var restoredFromState = await AuthService.GetStateFromTokenAsync(accessToken, refreshToken);
            // The user lost their server-side session, but still has a valid JWT
            if (restoredFromState)
            {
                NavigationManager.Refresh();
            }
        }
    }

    private string GetCookie(string name)
    {
        var cookies = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
        var cookiePairs = cookies.Split(';');
        foreach (var cookie in cookiePairs)
        {
            var parts = cookie.Split('=');
            if (parts.Length == 2 && parts[0].Trim() == name)
            {
                return parts[1].Trim();
            }
        }
        return string.Empty;
    }
}
