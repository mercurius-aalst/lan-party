@using Mercurius.LAN.Web.Models.Matches;
@using Mercurius.LAN.Web.Models.Participants;
@using Mercurius.LAN.Web.Extensions;
@using Mercurius.LAN.Web.Components.Shared;

<div class="modal-overlay" @onclick="OnClose">
    <div class="modal-dialog" @onclick:stopPropagation>
        <button class="modal-close" @onclick="OnClose">&times;</button>
        <div class="match-header">
            <span class="match-header-name">@GetParticipantName(Match.Participant1Id) <span class="match-header-score">[@(Match.Participant1Score ?? 0)]</span></span>
            <span class="match-header-vs">vs</span>
            <span class="match-header-name">@GetParticipantName(Match.Participant2Id) <span class="match-header-score">[@(Match.Participant2Score ?? 0)]</span></span>
        </div>
        <div class="match-format">@Match.Format.GetLabel()</div>
        <div class="participants-grid">
            <div class="@(GetCardClass(Match.Participant1Id, Match.Participant2Id))">
                <ParticipantComponent Participant="GetParticipantById(Match.Participant1Id)" />
            </div>
            <div class="@(GetCardClass(Match.Participant2Id, Match.Participant1Id))">
                <ParticipantComponent Participant="GetParticipantById(Match.Participant2Id)" />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Match Match { get; set; }
    [Parameter] public IEnumerable<Participant> Participants { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private Participant GetParticipantById(int? participantId)
    {
        if (participantId == null || Participants == null)
            return null;
        return Participants.FirstOrDefault(p => p.Id == participantId.Value);
    }

    private bool IsWinner(int? participantId) => Match.WinnerId != null && participantId == Match.WinnerId;

    private bool IsLoser(int? participantId, int? opponentId)
    {
        if (Match.WinnerId == null)
            return false;
        if (participantId is null || participantId != Match.WinnerId)
            return true;
        return false;
    }

    private string GetCardClass(int? participantId, int? opponentId)
    {
        if (IsWinner(participantId))
            return "participant-card winner-card";
        if (IsLoser(participantId, opponentId))
            return "participant-card loser-card";
        return "participant-card";
    }

    private string GetTbdOrBye(bool isFirst)
    {
        if (Match.RoundNumber == 1 && !Match.IsLowerBracketMatch)
            return "BYE";
        return "TBD";
    }

    private string GetParticipantName(int? participantId)
    {
        if (participantId == null || Participants == null)
            return "TBD";
        var participant = Participants.FirstOrDefault(p => p.Id == participantId.Value);
        if (participant == null)
            return "TBD";
        return participant.Type switch
        {
            ParticipantType.Player when participant is Player player => player.Username,
            ParticipantType.Team when participant is Team team => team.Name,
            _ => participantId.Value.ToString()
        };
    }
}
