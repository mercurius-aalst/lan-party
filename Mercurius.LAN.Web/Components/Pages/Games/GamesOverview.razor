@page "/"
@page "/games"
@using Mercurius.LAN.Web.Extensions
@using Mercurius.LAN.Web.Models.Games
@using Mercurius.LAN.Web.Models
@using Mercurius.LAN.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Mercurius.LAN.Web.Components.Shared
@using Microsoft.AspNetCore.Authorization
@inject IGameService GameService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
<PageTitle>Games</PageTitle>

<h1>Games</h1>

<div class="search-bar-container">
    <input type="text" class="form-control search-bar-input" placeholder="Search by game title..." @bind="searchTerm" />
</div>

@if (_games == null)
{
    <LoadingScreen Message="Loading..." />
}
else
{
    <div class="card-deck">
        <AuthorizeView Roles="admin">
            <Authorized>
            <div class="card add-game-card text-center" style="max-width: 540px; height: 100%; cursor:pointer;" @onclick="GoToAddGame">
                <div class="row no-gutters h-100">
                    <div class="col-md-12 d-flex align-items-center justify-content-center">
                        <div class="card-body">
                            <i class="bi bi-plus-lg" style="font-size: 3rem;"></i>
                        </div>
                    </div>
                </div>
            </div>
            </Authorized>
        </AuthorizeView>

        @foreach (var game in filteredGames)
        {
            <div class="card mb-3" style="max-width: 540px; cursor:pointer;" @onclick="() => GoToGameDetail(game.Id)">
                <div class="row no-gutters">
                    <div class="col-md-4">
                        <img src="@game.PictureUrl" class="card-img" alt="@game.Name">
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title">@game.Name</h5>
                            <p class="card-text">
                                <span class="game-status @game.Status.GetStatusClass()">@game.Status.GetStatusLabel()</span>
                            </p>
                            <p class="card-text"><small>@game.BracketType.GetLabel()</small></p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Game> _games;
    private string searchTerm = string.Empty;
    private List<Game> filteredGames =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? _games
            : _games?.Where(g => g.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList() ?? new List<Game>();

    protected override async Task OnInitializedAsync()
    {
        _games = await GameService.GetGamesAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void GoToGameDetail(int gameId)
    {
        NavigationManager.NavigateTo($"/games/{gameId}");
    }

    private void GoToAddGame()
    {
        NavigationManager.NavigateTo("/games/add");
    }
}
