@page "/login"
@using Mercurius.LAN.Web.APIClients
@using Mercurius.LAN.Web.Services
@using Mercurius.LAN.Web.Models.Auth
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Http
@using Refit
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Forms
@inject IAuthenticationClient AuthenticationClient

<PageTitle>Login</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h3>Login</h3>
        <EditForm Model="loginRequest" OnValidSubmit="HandleLogin" FormName="LoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginRequest.Username" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
            </div>

            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter] private HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private LoginRequest loginRequest { get; set; } = new ();

    private async Task HandleLogin()
    {
        try
        {
            var loginResponse = await AuthenticationClient.LoginAsync(loginRequest);

            if (HttpContext != null)
            {
                HttpContext.Response.Cookies.Append("access_token", loginResponse.Token, new CookieOptions
                {
                    HttpOnly = true,
                    Secure = true,
                    SameSite = SameSiteMode.Strict,
                    Expires = DateTime.UtcNow.AddHours(1)
                });

                HttpContext.Response.Cookies.Append("refresh_token", loginResponse.RefreshToken, new CookieOptions
                {
                    HttpOnly = true,
                    Secure = true,
                    SameSite = SameSiteMode.Strict,
                    Expires = DateTime.UtcNow.AddHours(1)
                });
            }

            HttpContext?.Response.Redirect("/admin", false);
        }
        catch (ApiException ex)
        {
            Console.WriteLine($"Login failed: {ex.Message}");
        }
    }
}