@using Microsoft.AspNetCore.Components.Authorization
@using Refit
@inject IToastService ToastService;
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <span class="logo-text">Mercurius Aalst</span>
        </a>
    </div>
</div>

<div class="nav-scrollable" onclick="document.getElementById('menu-toggle').checked = false;">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <span class="nav-link disabled" aria-disabled="true">Admin</span>
            <div class="nav-subitems">
                <NavLink class="nav-link" href="/admin/players">Players</NavLink>
                <NavLink class="nav-link" href="/admin/teams">Teams</NavLink>
            </div>
        </div>
    </nav>

</div>
<AuthorizeView>
    <Authorized>
        @if (_isUserMenuVisible)
        {
            <div class="overlay" @onclick="HandleOutsideClick">
            </div>
        }
        <div class="user-section">
            <div class="user-profile" @onclick:stopPropagation="true" @onclick="ToggleUserMenu">
                <span class="user-icon bi bi-person-circle"></span>
                <span>@AuthService.CurrentUser.Identity.Name</span>
            </div>
            @if(_isUserMenuVisible)
            {
                <div class="dropdown-menu" @onclick:stopPropagation="true">
                    <button>Change Password</button>
                    <button @onclick="LogoutAsync">Logout</button>
                </div>
            }
        </div>

    </Authorized>
</AuthorizeView>

@code {
    [Inject] private IAuthService AuthService { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    private bool _isUserMenuVisible = false;

    private async Task LogoutAsync()
    {
        NavigationManager.NavigateTo("/logout", true);
    }

    private void ToggleUserMenu() => _isUserMenuVisible = !_isUserMenuVisible;

    private void HandleOutsideClick()
    {
        _isUserMenuVisible = false;
    }
}