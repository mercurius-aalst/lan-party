@inherits InputBase<IBrowserFile>
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

<InputFile OnChange="HandleFileChange" class="@GetCssClass()" accept="image/png, image/jpeg, image/webp" />

@code {
    [Inject]
    private IConfiguration Configuration { get; set; } = null!;

    private object fileInputKey = new object();
    private long _maxFileSize;

    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        var maxFileSizeInMb = Configuration.GetValue<int>("FileSettings:MaxFileSizeInMB");
        _maxFileSize = maxFileSizeInMb * 1024 * 1024;
    }


    protected override void OnParametersSet()
    {
        if(EditContext is not null)
        {
            messageStore = new ValidationMessageStore(EditContext);
        }
    }

    protected override bool TryParseValueFromString(string? value, out IBrowserFile result, out string validationErrorMessage)
    {
        result = default!;
        validationErrorMessage = null!;
        return false;
    }

    private static readonly string[] AllowedContentTypes = new[] { "image/png", "image/jpeg", "image/webp" };

    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        messageStore?.Clear(FieldIdentifier);
        var file = e.File;
        if (!AllowedContentTypes.Contains(file.ContentType))
        {
            CurrentValue = null;
            string errorMessage = $"File type '{file.ContentType}' is not allowed. Only PNG, JPEG, and WEBP are accepted.";
            messageStore?.Add(FieldIdentifier, errorMessage);
            EditContext?.NotifyFieldChanged(FieldIdentifier);
            return;
        }
        try
        {
            var stream = file.OpenReadStream(maxAllowedSize: _maxFileSize);
            CurrentValue = file;
        }
        catch(IOException)
        {
            CurrentValue = null;
            string errorMessage = $"File size exceeds the {_maxFileSize / (1024 * 1024)}MB limit.";
            messageStore?.Add(FieldIdentifier, errorMessage);


            EditContext?.NotifyFieldChanged(FieldIdentifier);
        }
    }


    protected string GetCssClass()
    {
        string css = "form-control";
        bool isValid = EditContext.IsValid(FieldIdentifier);
        bool isModified = EditContext.IsModified(FieldIdentifier);

        if(!EditContext.IsModified())
            return css;
        css += $" {(isModified ? "modified " : "")}{(isValid ? "is-valid" : "is-invalid")}";
        return css;
    }

}