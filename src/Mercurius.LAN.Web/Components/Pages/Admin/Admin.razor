@page "/admin"
@attribute [Authorize]
@using Mercurius.LAN.Web.APIClients
@using Mercurius.LAN.Web.Models.Participants
@using Mercurius.LAN.Web.DTOs.Participants.Players
@using Microsoft.AspNetCore.Authorization
@using Refit
@using AuthorizeAttribute = Microsoft.AspNetCore.Authorization.AuthorizeAttribute

@inject IParticipantService ParticipantService
@inject IToastService ToastService

<PageTitle>Admin</PageTitle>

<div class="admin-container">
    <section class="admin-section">
        <h2>Players</h2>
        <button class="btn btn-success" @onclick="ShowCreatePlayerDialog">Add Player</button>
        <ul>
            @if (players != null)
            {
                @foreach (var player in players)
                {
                    <li>
                        @player.Username
                        <button class="btn btn-primary" @onclick="() => ShowEditPlayerDialog(player)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeletePlayer(player.Id)">Delete</button>
                    </li>
                }
            }
        </ul>
    </section>

    <section class="admin-section">
        <h2>Teams</h2>
        <button class="btn btn-success" @onclick="ShowCreateTeamDialog">Add Team</button>
        <ul>
            @if (teams != null)
            {
                @foreach (var team in teams)
                {
                    <li>
                        @team.Name
                        <button class="btn btn-primary" @onclick="() => ShowEditTeamDialog(team)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTeam(team.Id)">Delete</button>
                    </li>
                }
            }
        </ul>
    </section>
</div>

@code {
    private List<Player>? players;
    private List<Team>? teams;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            players = await ParticipantService.GetPlayersAsync();
            teams = await ParticipantService.GetTeamsAsync();
        }
        catch (ApiException ex)
        {
            ToastService.ShowError(ex.Content);
        }
    }

    private void ShowCreatePlayerDialog() { /* Implementation */ }
    private void ShowEditPlayerDialog(Player player) { /* Implementation */ }
    private async Task DeletePlayer(int id)
    {
        try
        {
            await ParticipantService.DeletePlayerAsync(id);
            players = await ParticipantService.GetPlayersAsync();
            ToastService.ShowSuccess("Player deleted successfully.");
        }
        catch (ApiException ex)
        {
            ToastService.ShowError(ex.Content);
        }
    }

    private void ShowCreateTeamDialog() { /* Implementation */ }
    private void ShowEditTeamDialog(Team team) { /* Implementation */ }
    private async Task DeleteTeam(int id)
    {
        try
        {
            await ParticipantService.DeleteTeamAsync(id);
            teams = await ParticipantService.GetTeamsAsync();
            ToastService.ShowSuccess("Team deleted successfully.");
        }
        catch (ApiException ex)
        {
            ToastService.ShowError(ex.Content);
        }
    }
}
