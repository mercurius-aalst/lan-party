@inject IJSRuntime JSRuntime

@page "/sponsors"
@rendermode InteractiveServer
<div class="overview-header">
    <h2>Our Sponsors</h2>
</div>

<div class="card-deck">
    @if (_sponsors == null || !_sponsors.Any())
    {
        <p>No sponsors available.</p>
    }
    else
    {
        @foreach (var tierGroup in _sponsors.GroupBy(s => s.SponsorTier).OrderBy(g => g.Key))
        {
            <div class="card-row">
                @foreach (var sponsor in tierGroup)
                {
                    var calculatedHeight = 400 / sponsor.SponsorTier; 
                    var srcSet = $"{sponsor.LogoUrl}?h={calculatedHeight} {calculatedHeight}h";
                    <a class="card mb-3" href="@sponsor.InfoUrl" style="cursor:pointer; height: @(calculatedHeight)px; width: fit-content;" data-overlay-text="@sponsor.Name">
                        <img src="@sponsor.LogoUrl" srcset="@srcSet" class="card-img" alt="@sponsor.Name" style="height: 100%; width: auto; max-width: 100%;">
                        <div class="card-overlay"><span>@sponsor.Name</span></div>
                    </a>
                }
            </div>
        }
    }
</div>

@code {
    private int availableHeight;
    private int availableWidth;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            availableHeight = await JSRuntime.InvokeAsync<int>("getAvailableHeight", ".overview-header");
            availableWidth = await JSRuntime.InvokeAsync<int>("getAvailableWidth");
            StateHasChanged();
        }
    }
}

<script>
    window.getAvailableHeight = (headerSelector) => {
        const header = document.querySelector(headerSelector);
        return window.innerHeight - (header ? header.offsetHeight : 0);
    };

    window.getAvailableWidth = () => {
        return window.innerWidth;
    };
</script>
