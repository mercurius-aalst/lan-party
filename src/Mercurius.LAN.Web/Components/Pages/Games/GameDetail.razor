@page "/games/{GameId:int}"
@using Mercurius.LAN.Web.Extensions
@using Mercurius.LAN.Web.Models.Games
@using Mercurius.LAN.Web.Services
@using Mercurius.LAN.Web.Components.Pages.Games.Tabs
@using Mercurius.LAN.Web.Components.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Refit
@using Blazored.Toast.Services
@inject NavigationManager Navigation
@inject IGameService GameService
@inject IToastService ToastService

@rendermode InteractiveServer

<PageTitle>Game Detail</PageTitle>
@if(game == null)
{
    <LoadingScreen Message="Loading..." />
}
else
{
    <div class="game-detail">
        <div class="game-header-tabs">
            <h1>
                @game.Name
                <AuthorizeView Roles="admin">
                    <Authorized>
                        <div class="action-buttons">
                            <button class="btn btn-success" @onclick="StartGame">Start</button>
                            <button class="btn btn-secondary" @onclick="CancelGame">Cancel</button>
                            <button class="btn btn-warning" @onclick="FinishGame">Finish</button>
                            <button class="btn btn-secondary" @onclick="ResetGame">Reset</button>
                            <button class="btn btn-danger" @onclick="DeleteGame">Delete</button>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </h1>
            <div class="tabs">
                <button class="tab-btn" @onclick="() => SelectTab(0)" disabled="@(selectedTab == 0)">Overview</button>
                <button class="tab-btn" @onclick="() => SelectTab(1)" disabled="@(selectedTab == 1)">Matches</button>
                <button class="tab-btn" @onclick="() => SelectTab(2)" disabled="@(selectedTab == 2)">Participants</button>
                <button class="tab-btn" @onclick="() => SelectTab(3)" disabled="@(selectedTab == 3)">Results</button>
            </div>
            <div class="tabs-dropdown">
                <select @onchange="OnTabDropdownChanged" value="@selectedTab">
                    <option value="0">Overview</option>
                    <option value="1">Matches</option>
                    <option value="2">Participants</option>
                    <option value="3">Results</option>
                </select>
            </div>
        </div>
        <div class="tab-content">
            @if(selectedTab == 0)
            {
                <OverviewTab Game="@game" />
            }
            else if(selectedTab == 1)
            {
                <MatchesTab OnDataReload="LoadGameDataAsync" BracketType="@game.BracketType" Matches="@game.Matches" Participants="@game.Participants" />
            }
            else if(selectedTab == 2)
            {
                <ParticipantsTab Game=@game Participants="@game.Participants" ParticipantType="@game.ParticipantType"/>
            }
            else if(selectedTab == 3)
            {
                <PlacementsTab Placements="@game.Placements" />
            }
        </div>
    </div>
}

@code {
    [Parameter] public int GameId { get; set; }
    private GameExtended? game;
    private int selectedTab = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadGameDataAsync();
    }

    private void SelectTab(int tab)
    {
        selectedTab = tab;
    }
    private async Task LoadGameDataAsync()
    {
        game = await GameService.GetGameByIdAsync(GameId);
        await InvokeAsync(StateHasChanged);

    }
    private void OnTabDropdownChanged(ChangeEventArgs e)
    {
        if(int.TryParse(e.Value?.ToString(), out int tab))
        {
            selectedTab = tab;
        }
    }

    private async Task FinishGame()
    {
        try
        {
            await GameService.CompleteGameAsync(GameId);
            ToastService.ShowSuccess("Game successfully finished.");
            await LoadGameDataAsync();
        }
        catch (ApiException ex)
        {
            ToastService.ShowError(ex.Content);
        }
    }
    private async Task StartGame()
    {
        try
        {
            await GameService.StartGameAsync(GameId);
            ToastService.ShowSuccess("Game successfully started.");
            await LoadGameDataAsync();
        }
        catch (ApiException ex)
        {
            ToastService.ShowError(ex.Content);
        }
    }

    private async Task CancelGame()
    {
        try
        {
            await GameService.CancelGameAsync(GameId);
            ToastService.ShowSuccess("Game succesfully canceled.");
            await LoadGameDataAsync();
        }
        catch (ApiException ex)
        {
            ToastService.ShowError(ex.Content);
        }
    }

    private async Task ResetGame()
    {
        try
        {
            await GameService.ResetGameAsync(GameId);
            ToastService.ShowSuccess("Game sucessfully reset.");
            await LoadGameDataAsync();
        }
        catch (ApiException ex)
        {
            ToastService.ShowError(ex.Content);
        }
    }

    private async Task DeleteGame()
    {
        try
        {
            await GameService.DeleteGameAsync(GameId);
            ToastService.ShowSuccess($"{game.Name} successfully deleted.");
            Navigation.NavigateTo("/games");
        }
        catch (ApiException ex)
        {
            ToastService.ShowError(ex.Content);
        }
    }

}
